#lang sicp
(define (eigth-queens)
  (let ((q1 (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8)))
        (q2 (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8)))
        (q3 (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8)))
        (q4 (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8)))
        (q5 (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8)))
        (q6 (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8)))
        (q7 (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8)))
        (q8 (cons (amb 1 2 3 4 5 6 7 8) (amb 1 2 3 4 5 6 7 8))))
    (require (distinct? (map car list q1 q2 q3 q4 q5 q6 q7 q8)))
    (require (distinct? (map cdr list q1 q2 q3 q4 q5 q6 q7 q8)))
    (require (distinct? (map (lambda (x) (+ (cdr x) (car x))) list q1 q2 q3 q4 q5 q6 q7 q8)))
    (require (distinct? (map (lambda (x) (- (cdr x) (car x))) list q1 q2 q3 q4 q5 q6 q7 q8)))
    (list (list 'q1 q1) (list 'q2 q2) (list 'q3 q3) (list 'q4 q4)
          (list 'q5 q5) (list 'q6 q6) (list 'q7 q7) (list 'q8 q8))))